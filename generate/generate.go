// +build ignore

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"sort"
	"strings"
)

func generate(fs http.FileSystem, items dataItems) {
	var b bytes.Buffer

	writeContent(&b, items)
	fmt.Fprintf(&b, "\n")
	writeStaticFiles(&b, fs)

	err := ioutil.WriteFile("octicons.go", b.Bytes(), 0644)
	check(err)
}

func writeContent(b *bytes.Buffer, items dataItems) {
	fmt.Fprintf(b, "// Code generated by \"go-octicons\"; DO NOT EDIT.\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "package octicons\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "import (\n")
	fmt.Fprintf(b, "	\"bytes\"\n")
	fmt.Fprintf(b, "	\"fmt\"\n")
	fmt.Fprintf(b, "	\"strconv\"\n")
	fmt.Fprintf(b, "	\"strings\"\n")
	fmt.Fprintf(b, ")\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "// Opts is used to provide options for rendering octicons.\n")
	fmt.Fprintf(b, "type Opts map[string]string\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "// Octicon represents an octicon.\n")
	fmt.Fprintf(b, "type Octicon interface {\n")
	fmt.Fprintf(b, "	Symbol() string\n")
	fmt.Fprintf(b, "	Keywords() []string\n")
	fmt.Fprintf(b, "	Path() string\n")
	fmt.Fprintf(b, "	Options() Opts\n")
	fmt.Fprintf(b, "	Width() int\n")
	fmt.Fprintf(b, "	Height() int\n")
	fmt.Fprintf(b, "	ToSVG(Opts) string\n")
	fmt.Fprintf(b, "	ToSVGUse(Opts) string\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "type octicon struct {\n")
	fmt.Fprintf(b, "	symbol          string\n")
	fmt.Fprintf(b, "	keywords        []string\n")
	fmt.Fprintf(b, "	path            string\n")
	fmt.Fprintf(b, "	options         Opts\n")
	fmt.Fprintf(b, "	width           int\n")
	fmt.Fprintf(b, "	height          int\n")
	fmt.Fprintf(b, "	toSVGDefault    string\n")
	fmt.Fprintf(b, "	toSVGUseDefault string\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "var (\n")
	writeOcticonVars(b, items)
	fmt.Fprintf(b, ")\n")
	fmt.Fprintf(b, "\n")
	writeOcticons(b, items)
	fmt.Fprintf(b, "\n")
	writeSymbols(b, items)
	fmt.Fprintf(b, "\n")
	writeHTMLAttrs(b)
	fmt.Fprintf(b, "\n")
	writeInterfaceImpl(b)
}

func writeOcticonVars(b *bytes.Buffer, items dataItems) {
	names := sortedNames(items)

	for i, name := range names {
		writeOcticonVar(b, name, items[name])

		if i < len(names)-1 {
			fmt.Fprintf(b, "\n")
		}
	}
}

func sortedNames(items dataItems) []string {
	names := []string{}

	for name := range items {
		names = append(names, name)
	}

	sort.Strings(names)

	return names
}

func writeOcticonVar(b *bytes.Buffer, name string, item *dataItem) {
	varName := varName(name)
	fmt.Fprintf(b, "	// %s represents the %s octicon.\n", varName, name)
	fmt.Fprintf(b, "	%s Octicon = &octicon{\n", varName)
	fmt.Fprintf(b, "		symbol:   %q,\n", name)
	fmt.Fprintf(b, "		keywords: []string{%s},\n", strArr(item.keywords))
	fmt.Fprintf(b, "		path:     %q,\n", item.path)
	fmt.Fprintf(b, "		options: Opts{\n")
	fmt.Fprintf(b, "			\"version\":     \"1.1\",\n")
	fmt.Fprintf(b, "			\"width\":       \"%d\",\n", item.width)
	fmt.Fprintf(b, "			\"height\":      \"%d\",\n", item.height)
	fmt.Fprintf(b, "			\"viewBox\":     \"0 0 %d %d\",\n", item.width, item.height)
	fmt.Fprintf(b, "			\"class\":       \"octicon octicon-%s\",\n", name)
	fmt.Fprintf(b, "			\"aria-hidden\": \"true\",\n")
	fmt.Fprintf(b, "		},\n")
	fmt.Fprintf(b, "		width:           %d,\n", item.width)
	fmt.Fprintf(b, "		height:          %d,\n", item.height)
	fmt.Fprintf(b, "		toSVGDefault:    `%s`,\n", toSVGDefault(name, item))
	fmt.Fprintf(b, "		toSVGUseDefault: `%s`,\n", toSVGUseDefault(name, item))
	fmt.Fprintf(b, "	}\n")
}

func varName(name string) string {
	return strings.Replace(strings.Title(name), "-", "", -1)
}

func strArr(sa []string) string {
	qsa := []string{}
	for _, s := range sa {
		qsa = append(qsa, "\""+s+"\"")
	}

	return strings.Join(qsa, ", ")
}

func toSVGDefault(name string, item *dataItem) string {
	return fmt.Sprintf(`<svg version="1.1" width="%d" height="%d" viewBox="0 0 %d %d" class="octicon octicon-%s" aria-hidden="true">%s</svg>`,
		item.width, item.height, item.width, item.height, name, item.path)
}

func toSVGUseDefault(name string, item *dataItem) string {
	return fmt.Sprintf(`<svg version="1.1" width="%d" height="%d" viewBox="0 0 %d %d" class="octicon octicon-%s" aria-hidden="true"><use xlink:href="#%s"/></svg>`, item.width, item.height, item.width, item.height, name, name)
}

func writeOcticons(b *bytes.Buffer, items dataItems) {
	fmt.Fprintf(b, "// Octicons return the Octicon corresponding to symbol.\n")
	fmt.Fprintf(b, "func Octicons(symbol string) Octicon {\n")
	fmt.Fprintf(b, "	switch symbol {\n")

	for _, name := range sortedNames(items) {
		fmt.Fprintf(b, "	case %q:\n", name)
		fmt.Fprintf(b, "		return %s\n", varName(name))
	}

	fmt.Fprintf(b, "	default:\n")
	fmt.Fprintf(b, "		return nil\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "}\n")
}

func writeSymbols(b *bytes.Buffer, items dataItems) {
	fmt.Fprintf(b, "// Symbols returns the list of available symbols.\n")
	fmt.Fprintf(b, "func Symbols() []string {\n")
	fmt.Fprintf(b, "	symbols := [...]string{\n")

	for _, name := range sortedNames(items) {
		fmt.Fprintf(b, "		%q,\n", name)
	}

	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	return symbols[:]\n")
	fmt.Fprintf(b, "}\n")
}

func writeHTMLAttrs(b *bytes.Buffer) {
	fmt.Fprintf(b, "// Returns a string representation of html attributes.\n")
	fmt.Fprintf(b, "func (o *octicon) htmlAttribs(userOpts Opts) string {\n")
	fmt.Fprintf(b, "	attrs := make(Opts)\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	for k, v := range o.options {\n")
	fmt.Fprintf(b, "		attrs[k] = v\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	for k, v := range userOpts {\n")
	fmt.Fprintf(b, "		attrs[k] = v\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	htmlAttribsWH(attrs, userOpts, o.width, o.height)\n")
	fmt.Fprintf(b, "	htmlAttribsClass(attrs, userOpts, o.symbol)\n")
	fmt.Fprintf(b, "	htmlAttribsAria(attrs, userOpts)\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	var buf bytes.Buffer\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	for attr, val := range attrs {\n")
	fmt.Fprintf(b, "		fmt.Fprintf(&buf, \"%%s=%%q \", attr, val)\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	return strings.Trim(buf.String(), \" \")\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "func htmlAttribsWH(attrs Opts, opts Opts, width int, height int) {\n")
	fmt.Fprintf(b, "	// If any of the width or height is passed in\n")
	fmt.Fprintf(b, "	optsW, okW := opts[\"width\"]\n")
	fmt.Fprintf(b, "	optsH, okH := opts[\"height\"]\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	if okW || okH {\n")
	fmt.Fprintf(b, "		var err error\n")
	fmt.Fprintf(b, "		w := float64(width)\n")
	fmt.Fprintf(b, "		h := float64(height)\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "		if okW {\n")
	fmt.Fprintf(b, "			w, err = strconv.ParseFloat(optsW, 64)\n")
	fmt.Fprintf(b, "			if err != nil {\n")
	fmt.Fprintf(b, "				w = float64(width)\n")
	fmt.Fprintf(b, "			}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "			if !okH {\n")
	fmt.Fprintf(b, "				h = w * float64(height) / float64(width)\n")
	fmt.Fprintf(b, "			}\n")
	fmt.Fprintf(b, "		}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "		if okH {\n")
	fmt.Fprintf(b, "			h, err = strconv.ParseFloat(optsH, 64)\n")
	fmt.Fprintf(b, "			if err != nil {\n")
	fmt.Fprintf(b, "				h = float64(height)\n")
	fmt.Fprintf(b, "			}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "			if !okW {\n")
	fmt.Fprintf(b, "				w = h * float64(width) / float64(height)\n")
	fmt.Fprintf(b, "			}\n")
	fmt.Fprintf(b, "		}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "		attrs[\"width\"] = strconv.FormatFloat(w, 'f', -1, 64)\n")
	fmt.Fprintf(b, "		attrs[\"height\"] = strconv.FormatFloat(h, 'f', -1, 64)\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "func htmlAttribsClass(attrs Opts, opts Opts, symbol string) {\n")
	fmt.Fprintf(b, "	// If the user passed in class\n")
	fmt.Fprintf(b, "	optsC, okC := opts[\"class\"]\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	if okC {\n")
	fmt.Fprintf(b, "		class := \"octicon octicon-\" + symbol + \" \" + optsC\n")
	fmt.Fprintf(b, "		attrs[\"class\"] = strings.Trim(class, \" \")\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "func htmlAttribsAria(attrs Opts, opts Opts) {\n")
	fmt.Fprintf(b, "	// If the user passed in aria-label\n")
	fmt.Fprintf(b, "	_, okA := opts[\"aria-label\"]\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	if okA {\n")
	fmt.Fprintf(b, "		attrs[\"role\"] = \"img\"\n")
	fmt.Fprintf(b, "		delete(attrs, \"aria-hidden\")\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "}\n")
}

func writeInterfaceImpl(b *bytes.Buffer) {
	fmt.Fprintf(b, "// Symbol returns the symbol name, same as the key for that icon.\n")
	fmt.Fprintf(b, "func (o *octicon) Symbol() string {\n")
	fmt.Fprintf(b, "	return o.symbol\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// Keywords returns an array of keywords for the icon.\n")
	fmt.Fprintf(b, "func (o *octicon) Keywords() []string {\n")
	fmt.Fprintf(b, "	ret := make([]string, len(o.keywords))\n")
	fmt.Fprintf(b, "	copy(ret, o.keywords)\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	return ret\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// Path returns the string representation of the path of the icon.\n")
	fmt.Fprintf(b, "func (o *octicon) Path() string {\n")
	fmt.Fprintf(b, "	return o.path\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// Options returns the attributes that will be added to the output tag.\n")
	fmt.Fprintf(b, "func (o *octicon) Options() Opts {\n")
	fmt.Fprintf(b, "	ret := make(Opts)\n")
	fmt.Fprintf(b, "	for k, v := range o.options {\n")
	fmt.Fprintf(b, "		ret[k] = v\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	return ret\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// Width returns the icon's true width, based on the svg view box width.\n")
	fmt.Fprintf(b, "func (o *octicon) Width() int {\n")
	fmt.Fprintf(b, "	return o.width\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// Height returns the icon's true height, based on the svg view box height.\n")
	fmt.Fprintf(b, "func (o *octicon) Height() int {\n")
	fmt.Fprintf(b, "	return o.height\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// ToSVG returns the string representation of the svg for the icon.\n")
	fmt.Fprintf(b, "func (o *octicon) ToSVG(opts Opts) string {\n")
	fmt.Fprintf(b, "	if opts == nil {\n")
	fmt.Fprintf(b, "		return o.toSVGDefault\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	attrs := o.htmlAttribs(opts)\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	return fmt.Sprintf(`<svg %%s>%%s</svg>`, attrs, o.path)\n")
	fmt.Fprintf(b, "}\n")
	fmt.Fprintf(b, "\n")

	fmt.Fprintf(b, "// ToSVGUse returns the string representation of the svg for the icon to use with sprites.\n")
	fmt.Fprintf(b, "func (o *octicon) ToSVGUse(opts Opts) string {\n")
	fmt.Fprintf(b, "	if opts == nil {\n")
	fmt.Fprintf(b, "		return o.toSVGUseDefault\n")
	fmt.Fprintf(b, "	}\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	attrs := o.htmlAttribs(opts)\n")
	fmt.Fprintf(b, "\n")
	fmt.Fprintf(b, "	return fmt.Sprintf(`<svg %%s><use xlink:href=\"#%%s\"/></svg>`, attrs, o.symbol)\n")
	fmt.Fprintf(b, "}\n")
}

func writeStaticFiles(b *bytes.Buffer, fs http.FileSystem) {
	f, err := fs.Open("package/build/sprite.octicons.svg")
	check(err)
	d, err := ioutil.ReadAll(f)
	check(err)

	fmt.Fprintf(b, "var (\n")
	fmt.Fprintf(b, "	// Spritesheet contains the contents of \"sprite.octicons.svg\".\n")
	fmt.Fprintf(b, "	Spritesheet = %q\n", d)
	fmt.Fprintf(b, "\n")

	f, err = fs.Open("package/build/octicons.min.css")
	check(err)
	d, err = ioutil.ReadAll(f)
	check(err)

	fmt.Fprintf(b, "	// CSS contains the contents of \"octicons.min.css\".\n")
	fmt.Fprintf(b, "	CSS = %q\n", d)
	fmt.Fprintf(b, ")\n")
}
